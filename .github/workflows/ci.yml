name: CI/CD Pipeline for DocuThinker App

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

################################################################################
# 1 · Formatting & Lint 🔧
################################################################################
jobs:
  formatting:
    name: "🔧 Format & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: npm ci
      - run: npm run format
      - run: npm run lint

  ################################################################################
  # 2 · Backend & Frontend Tests (parallel) ✅ 🌐
  ################################################################################
  backend-tests:
    name: "✅ Backend Tests"
    runs-on: ubuntu-latest
    needs: formatting
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: cd backend && npm ci
      - run: cd backend && npm test

  frontend-tests:
    name: "🌐 Frontend Tests"
    runs-on: ubuntu-latest
    needs: formatting
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: cd frontend && npm ci
      - run: cd frontend && npm test

  ################################################################################
  # 3 · Coverage 📊
  ################################################################################
  coverage:
    name: "📊 Coverage Artifacts"
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 18 }
      - run: npm ci
      - run: cd backend && npm ci
      - run: cd frontend && npm ci
      - name: Backend coverage
        run: cd backend && npm test -- --coverage
      - uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
      - name: Frontend coverage
        run: cd frontend && npm test -- --coverage
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

  ################################################################################
  # 4 · Docker 🐳
  ################################################################################
  docker:
    name: "🐳 Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: coverage
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push backend image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/docuthinker-backend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/docuthinker-backend:latest
      - name: Build & push frontend image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/docuthinker-frontend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/docuthinker-frontend:latest

  ################################################################################
  # 5 · Deploy 🚀
  ################################################################################
  deploy:
    name: "🚀 Deploy"
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy backend to Render
        run: |
          echo "🔄 Deploying backend to Render…"
          sleep 2
          echo "✅ Backend deployed to Render!"
      - name: Deploy frontend to Vercel
        run: |
          echo "🔄 Deploying frontend to Vercel…"
          sleep 2
          echo "✅ Frontend deployed to Vercel!"

  ################################################################################
  # 6 · All Done 🎉
  ################################################################################
  complete:
    name: "🎉 All Done"
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - run: echo "🎉 CI/CD pipeline finished successfully – all done!"
